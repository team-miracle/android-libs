// Generated by the protocol buffer compiler.  DO NOT EDIT!

package org.android.btsap;

public final class SapApi {
  private SapApi() {}
  // enum MsgType
  public static final int UNKNOWN = 0;
  public static final int REQUEST = 1;
  public static final int RESPONSE = 2;
  public static final int UNSOL_RESPONSE = 3;

  // enum MsgId
  public static final int UNKNOWN_REQ = 0;
  public static final int RIL_SIM_SAP_CONNECT = 1;
  public static final int RIL_SIM_SAP_DISCONNECT = 2;
  public static final int RIL_SIM_SAP_APDU = 3;
  public static final int RIL_SIM_SAP_TRANSFER_ATR = 4;
  public static final int RIL_SIM_SAP_POWER = 5;
  public static final int RIL_SIM_SAP_RESET_SIM = 6;
  public static final int RIL_SIM_SAP_STATUS = 7;
  public static final int RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS = 8;
  public static final int RIL_SIM_SAP_ERROR_RESP = 9;
  public static final int RIL_SIM_SAP_SET_TRANSFER_PROTOCOL = 10;

  // enum Error
  public static final int RIL_E_SUCCESS = 0;
  public static final int RIL_E_RADIO_NOT_AVAILABLE = 1;
  public static final int RIL_E_GENERIC_FAILURE = 2;
  public static final int RIL_E_REQUEST_NOT_SUPPORTED = 3;
  public static final int RIL_E_CANCELLED = 4;
  public static final int RIL_E_INVALID_PARAMETER = 5;
  public static final int RIL_E_UNUSED = 6;

  @SuppressWarnings("hiding")
  public static final class MsgHeader extends
      com.google.protobuf.micro.MessageMicro {
    public MsgHeader() {}

    // required fixed32 token = 1;
    public static final int TOKEN_FIELD_NUMBER = 1;
    private boolean hasToken;
    private int token_ = 0;
    public int getToken() { return token_; }
    public boolean hasToken() { return hasToken; }
    public MsgHeader setToken(int value) {
      hasToken = true;
      token_ = value;
      return this;
    }
    public MsgHeader clearToken() {
      hasToken = false;
      token_ = 0;
      return this;
    }

    // required .MsgType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private boolean hasType;
    private int type_ = org.android.btsap.SapApi.UNKNOWN;
    public boolean hasType() { return hasType; }
    public int getType() { return type_; }
    public MsgHeader setType(int value) {
      hasType = true;
      type_ = value;
      return this;
    }
    public MsgHeader clearType() {
      hasType = false;
      type_ = org.android.btsap.SapApi.UNKNOWN;
      return this;
    }

    // required .MsgId id = 3;
    public static final int ID_FIELD_NUMBER = 3;
    private boolean hasId;
    private int id_ = org.android.btsap.SapApi.UNKNOWN_REQ;
    public boolean hasId() { return hasId; }
    public int getId() { return id_; }
    public MsgHeader setId(int value) {
      hasId = true;
      id_ = value;
      return this;
    }
    public MsgHeader clearId() {
      hasId = false;
      id_ = org.android.btsap.SapApi.UNKNOWN_REQ;
      return this;
    }

    // required .Error error = 4;
    public static final int ERROR_FIELD_NUMBER = 4;
    private boolean hasError;
    private int error_ = org.android.btsap.SapApi.RIL_E_SUCCESS;
    public boolean hasError() { return hasError; }
    public int getError() { return error_; }
    public MsgHeader setError(int value) {
      hasError = true;
      error_ = value;
      return this;
    }
    public MsgHeader clearError() {
      hasError = false;
      error_ = org.android.btsap.SapApi.RIL_E_SUCCESS;
      return this;
    }

    // required bytes payload = 5;
    public static final int PAYLOAD_FIELD_NUMBER = 5;
    private boolean hasPayload;
    private com.google.protobuf.micro.ByteStringMicro payload_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getPayload() { return payload_; }
    public boolean hasPayload() { return hasPayload; }
    public MsgHeader setPayload(com.google.protobuf.micro.ByteStringMicro value) {
      hasPayload = true;
      payload_ = value;
      return this;
    }
    public MsgHeader clearPayload() {
      hasPayload = false;
      payload_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final MsgHeader clear() {
      clearToken();
      clearType();
      clearId();
      clearError();
      clearPayload();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasToken) return false;
      if (!hasType) return false;
      if (!hasId) return false;
      if (!hasError) return false;
      if (!hasPayload) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasToken()) {
        output.writeFixed32(1, getToken());
      }
      if (hasType()) {
        output.writeInt32(2, getType());
      }
      if (hasId()) {
        output.writeInt32(3, getId());
      }
      if (hasError()) {
        output.writeInt32(4, getError());
      }
      if (hasPayload()) {
        output.writeBytes(5, getPayload());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasToken()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeFixed32Size(1, getToken());
      }
      if (hasType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getType());
      }
      if (hasId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getId());
      }
      if (hasError()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(4, getError());
      }
      if (hasPayload()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(5, getPayload());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public MsgHeader mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 13: {
            setToken(input.readFixed32());
            break;
          }
          case 16: {
              setType(input.readInt32());
            break;
          }
          case 24: {
              setId(input.readInt32());
            break;
          }
          case 32: {
              setError(input.readInt32());
            break;
          }
          case 42: {
            setPayload(input.readBytes());
            break;
          }
        }
      }
    }

    public static MsgHeader parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (MsgHeader) (new MsgHeader().mergeFrom(data));
    }

    public static MsgHeader parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new MsgHeader().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_CONNECT_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_CONNECT_REQ() {}

    // required int32 max_message_size = 1;
    public static final int MAX_MESSAGE_SIZE_FIELD_NUMBER = 1;
    private boolean hasMaxMessageSize;
    private int maxMessageSize_ = 0;
    public int getMaxMessageSize() { return maxMessageSize_; }
    public boolean hasMaxMessageSize() { return hasMaxMessageSize; }
    public RIL_SIM_SAP_CONNECT_REQ setMaxMessageSize(int value) {
      hasMaxMessageSize = true;
      maxMessageSize_ = value;
      return this;
    }
    public RIL_SIM_SAP_CONNECT_REQ clearMaxMessageSize() {
      hasMaxMessageSize = false;
      maxMessageSize_ = 0;
      return this;
    }

    public final RIL_SIM_SAP_CONNECT_REQ clear() {
      clearMaxMessageSize();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasMaxMessageSize) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasMaxMessageSize()) {
        output.writeInt32(1, getMaxMessageSize());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasMaxMessageSize()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getMaxMessageSize());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_CONNECT_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setMaxMessageSize(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_CONNECT_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_CONNECT_REQ) (new RIL_SIM_SAP_CONNECT_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_CONNECT_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_CONNECT_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_CONNECT_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_CONNECT_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_SAP_CONNECT_FAILURE = 1;
    public static final int RIL_E_SAP_MSG_SIZE_TOO_LARGE = 2;
    public static final int RIL_E_SAP_MSG_SIZE_TOO_SMALL = 3;
    public static final int RIL_E_SAP_CONNECT_OK_CALL_ONGOING = 4;

    // required .RIL_SIM_SAP_CONNECT_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_CONNECT_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_CONNECT_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_CONNECT_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_CONNECT_RSP.RIL_E_SUCCESS;
      return this;
    }

    // optional int32 max_message_size = 2;
    public static final int MAX_MESSAGE_SIZE_FIELD_NUMBER = 2;
    private boolean hasMaxMessageSize;
    private int maxMessageSize_ = 0;
    public int getMaxMessageSize() { return maxMessageSize_; }
    public boolean hasMaxMessageSize() { return hasMaxMessageSize; }
    public RIL_SIM_SAP_CONNECT_RSP setMaxMessageSize(int value) {
      hasMaxMessageSize = true;
      maxMessageSize_ = value;
      return this;
    }
    public RIL_SIM_SAP_CONNECT_RSP clearMaxMessageSize() {
      hasMaxMessageSize = false;
      maxMessageSize_ = 0;
      return this;
    }

    public final RIL_SIM_SAP_CONNECT_RSP clear() {
      clearResponse();
      clearMaxMessageSize();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
      if (hasMaxMessageSize()) {
        output.writeInt32(2, getMaxMessageSize());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      if (hasMaxMessageSize()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getMaxMessageSize());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_CONNECT_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
          case 16: {
            setMaxMessageSize(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_CONNECT_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_CONNECT_RSP) (new RIL_SIM_SAP_CONNECT_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_CONNECT_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_CONNECT_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_DISCONNECT_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_DISCONNECT_REQ() {}

    public final RIL_SIM_SAP_DISCONNECT_REQ clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_DISCONNECT_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_DISCONNECT_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_DISCONNECT_REQ) (new RIL_SIM_SAP_DISCONNECT_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_DISCONNECT_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_DISCONNECT_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_DISCONNECT_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_DISCONNECT_RSP() {}

    public final RIL_SIM_SAP_DISCONNECT_RSP clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_DISCONNECT_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_DISCONNECT_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_DISCONNECT_RSP) (new RIL_SIM_SAP_DISCONNECT_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_DISCONNECT_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_DISCONNECT_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_DISCONNECT_IND extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_DISCONNECT_IND() {}

    // enum DisconnectType
    public static final int RIL_S_DISCONNECT_TYPE_GRACEFUL = 0;
    public static final int RIL_S_DISCONNECT_TYPE_IMMEDIATE = 1;

    // required .RIL_SIM_SAP_DISCONNECT_IND.DisconnectType disconnectType = 1;
    public static final int DISCONNECTTYPE_FIELD_NUMBER = 1;
    private boolean hasDisconnectType;
    private int disconnectType_ = org.android.btsap.SapApi.RIL_SIM_SAP_DISCONNECT_IND.RIL_S_DISCONNECT_TYPE_GRACEFUL;
    public boolean hasDisconnectType() { return hasDisconnectType; }
    public int getDisconnectType() { return disconnectType_; }
    public RIL_SIM_SAP_DISCONNECT_IND setDisconnectType(int value) {
      hasDisconnectType = true;
      disconnectType_ = value;
      return this;
    }
    public RIL_SIM_SAP_DISCONNECT_IND clearDisconnectType() {
      hasDisconnectType = false;
      disconnectType_ = org.android.btsap.SapApi.RIL_SIM_SAP_DISCONNECT_IND.RIL_S_DISCONNECT_TYPE_GRACEFUL;
      return this;
    }

    public final RIL_SIM_SAP_DISCONNECT_IND clear() {
      clearDisconnectType();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasDisconnectType) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasDisconnectType()) {
        output.writeInt32(1, getDisconnectType());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasDisconnectType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getDisconnectType());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_DISCONNECT_IND mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setDisconnectType(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_DISCONNECT_IND parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_DISCONNECT_IND) (new RIL_SIM_SAP_DISCONNECT_IND().mergeFrom(data));
    }

    public static RIL_SIM_SAP_DISCONNECT_IND parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_DISCONNECT_IND().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_APDU_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_APDU_REQ() {}

    // enum Type
    public static final int RIL_TYPE_APDU = 0;
    public static final int RIL_TYPE_APDU7816 = 1;

    // required .RIL_SIM_SAP_APDU_REQ.Type type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private int type_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_REQ.RIL_TYPE_APDU;
    public boolean hasType() { return hasType; }
    public int getType() { return type_; }
    public RIL_SIM_SAP_APDU_REQ setType(int value) {
      hasType = true;
      type_ = value;
      return this;
    }
    public RIL_SIM_SAP_APDU_REQ clearType() {
      hasType = false;
      type_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_REQ.RIL_TYPE_APDU;
      return this;
    }

    // required bytes command = 2;
    public static final int COMMAND_FIELD_NUMBER = 2;
    private boolean hasCommand;
    private com.google.protobuf.micro.ByteStringMicro command_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getCommand() { return command_; }
    public boolean hasCommand() { return hasCommand; }
    public RIL_SIM_SAP_APDU_REQ setCommand(com.google.protobuf.micro.ByteStringMicro value) {
      hasCommand = true;
      command_ = value;
      return this;
    }
    public RIL_SIM_SAP_APDU_REQ clearCommand() {
      hasCommand = false;
      command_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final RIL_SIM_SAP_APDU_REQ clear() {
      clearType();
      clearCommand();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasCommand) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeInt32(1, getType());
      }
      if (hasCommand()) {
        output.writeBytes(2, getCommand());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getType());
      }
      if (hasCommand()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(2, getCommand());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_APDU_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setType(input.readInt32());
            break;
          }
          case 18: {
            setCommand(input.readBytes());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_APDU_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_APDU_REQ) (new RIL_SIM_SAP_APDU_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_APDU_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_APDU_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_APDU_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_APDU_RSP() {}

    // enum Type
    public static final int RIL_TYPE_APDU = 0;
    public static final int RIL_TYPE_APDU7816 = 1;

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 1;
    public static final int RIL_E_SIM_NOT_READY = 2;
    public static final int RIL_E_SIM_ALREADY_POWERED_OFF = 3;
    public static final int RIL_E_SIM_ABSENT = 4;

    // required .RIL_SIM_SAP_APDU_RSP.Type type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private int type_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_RSP.RIL_TYPE_APDU;
    public boolean hasType() { return hasType; }
    public int getType() { return type_; }
    public RIL_SIM_SAP_APDU_RSP setType(int value) {
      hasType = true;
      type_ = value;
      return this;
    }
    public RIL_SIM_SAP_APDU_RSP clearType() {
      hasType = false;
      type_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_RSP.RIL_TYPE_APDU;
      return this;
    }

    // required .RIL_SIM_SAP_APDU_RSP.Response response = 2;
    public static final int RESPONSE_FIELD_NUMBER = 2;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_APDU_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_APDU_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_APDU_RSP.RIL_E_SUCCESS;
      return this;
    }

    // optional bytes apduResponse = 3;
    public static final int APDURESPONSE_FIELD_NUMBER = 3;
    private boolean hasApduResponse;
    private com.google.protobuf.micro.ByteStringMicro apduResponse_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getApduResponse() { return apduResponse_; }
    public boolean hasApduResponse() { return hasApduResponse; }
    public RIL_SIM_SAP_APDU_RSP setApduResponse(com.google.protobuf.micro.ByteStringMicro value) {
      hasApduResponse = true;
      apduResponse_ = value;
      return this;
    }
    public RIL_SIM_SAP_APDU_RSP clearApduResponse() {
      hasApduResponse = false;
      apduResponse_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final RIL_SIM_SAP_APDU_RSP clear() {
      clearType();
      clearResponse();
      clearApduResponse();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeInt32(1, getType());
      }
      if (hasResponse()) {
        output.writeInt32(2, getResponse());
      }
      if (hasApduResponse()) {
        output.writeBytes(3, getApduResponse());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getType());
      }
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getResponse());
      }
      if (hasApduResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(3, getApduResponse());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_APDU_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setType(input.readInt32());
            break;
          }
          case 16: {
              setResponse(input.readInt32());
            break;
          }
          case 26: {
            setApduResponse(input.readBytes());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_APDU_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_APDU_RSP) (new RIL_SIM_SAP_APDU_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_APDU_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_APDU_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_TRANSFER_ATR_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_TRANSFER_ATR_REQ() {}

    public final RIL_SIM_SAP_TRANSFER_ATR_REQ clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_TRANSFER_ATR_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_TRANSFER_ATR_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_TRANSFER_ATR_REQ) (new RIL_SIM_SAP_TRANSFER_ATR_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_TRANSFER_ATR_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_TRANSFER_ATR_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_TRANSFER_ATR_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_TRANSFER_ATR_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 1;
    public static final int RIL_E_SIM_ALREADY_POWERED_OFF = 3;
    public static final int RIL_E_SIM_ALREADY_POWERED_ON = 18;
    public static final int RIL_E_SIM_ABSENT = 4;
    public static final int RIL_E_SIM_DATA_NOT_AVAILABLE = 6;

    // required .RIL_SIM_SAP_TRANSFER_ATR_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_TRANSFER_ATR_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_TRANSFER_ATR_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_TRANSFER_ATR_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_TRANSFER_ATR_RSP.RIL_E_SUCCESS;
      return this;
    }

    // optional bytes atr = 2;
    public static final int ATR_FIELD_NUMBER = 2;
    private boolean hasAtr;
    private com.google.protobuf.micro.ByteStringMicro atr_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getAtr() { return atr_; }
    public boolean hasAtr() { return hasAtr; }
    public RIL_SIM_SAP_TRANSFER_ATR_RSP setAtr(com.google.protobuf.micro.ByteStringMicro value) {
      hasAtr = true;
      atr_ = value;
      return this;
    }
    public RIL_SIM_SAP_TRANSFER_ATR_RSP clearAtr() {
      hasAtr = false;
      atr_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final RIL_SIM_SAP_TRANSFER_ATR_RSP clear() {
      clearResponse();
      clearAtr();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
      if (hasAtr()) {
        output.writeBytes(2, getAtr());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      if (hasAtr()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(2, getAtr());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_TRANSFER_ATR_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
          case 18: {
            setAtr(input.readBytes());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_TRANSFER_ATR_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_TRANSFER_ATR_RSP) (new RIL_SIM_SAP_TRANSFER_ATR_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_TRANSFER_ATR_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_TRANSFER_ATR_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_POWER_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_POWER_REQ() {}

    // required bool state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boolean hasState;
    private boolean state_ = false;
    public boolean getState() { return state_; }
    public boolean hasState() { return hasState; }
    public RIL_SIM_SAP_POWER_REQ setState(boolean value) {
      hasState = true;
      state_ = value;
      return this;
    }
    public RIL_SIM_SAP_POWER_REQ clearState() {
      hasState = false;
      state_ = false;
      return this;
    }

    public final RIL_SIM_SAP_POWER_REQ clear() {
      clearState();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasState) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasState()) {
        output.writeBool(1, getState());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getState());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_POWER_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setState(input.readBool());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_POWER_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_POWER_REQ) (new RIL_SIM_SAP_POWER_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_POWER_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_POWER_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_POWER_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_POWER_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 2;
    public static final int RIL_E_SIM_ABSENT = 11;
    public static final int RIL_E_SIM_ALREADY_POWERED_OFF = 17;
    public static final int RIL_E_SIM_ALREADY_POWERED_ON = 18;

    // required .RIL_SIM_SAP_POWER_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_POWER_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_POWER_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_POWER_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_POWER_RSP.RIL_E_SUCCESS;
      return this;
    }

    public final RIL_SIM_SAP_POWER_RSP clear() {
      clearResponse();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_POWER_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_POWER_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_POWER_RSP) (new RIL_SIM_SAP_POWER_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_POWER_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_POWER_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_RESET_SIM_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_RESET_SIM_REQ() {}

    public final RIL_SIM_SAP_RESET_SIM_REQ clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_RESET_SIM_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_RESET_SIM_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_RESET_SIM_REQ) (new RIL_SIM_SAP_RESET_SIM_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_RESET_SIM_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_RESET_SIM_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_RESET_SIM_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_RESET_SIM_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 2;
    public static final int RIL_E_SIM_ABSENT = 11;
    public static final int RIL_E_SIM_NOT_READY = 16;
    public static final int RIL_E_SIM_ALREADY_POWERED_OFF = 17;

    // required .RIL_SIM_SAP_RESET_SIM_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_RESET_SIM_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_RESET_SIM_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_RESET_SIM_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_RESET_SIM_RSP.RIL_E_SUCCESS;
      return this;
    }

    public final RIL_SIM_SAP_RESET_SIM_RSP clear() {
      clearResponse();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_RESET_SIM_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_RESET_SIM_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_RESET_SIM_RSP) (new RIL_SIM_SAP_RESET_SIM_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_RESET_SIM_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_RESET_SIM_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_STATUS_IND extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_STATUS_IND() {}

    // enum Status
    public static final int RIL_SIM_STATUS_UNKNOWN_ERROR = 0;
    public static final int RIL_SIM_STATUS_CARD_RESET = 1;
    public static final int RIL_SIM_STATUS_CARD_NOT_ACCESSIBLE = 2;
    public static final int RIL_SIM_STATUS_CARD_REMOVED = 3;
    public static final int RIL_SIM_STATUS_CARD_INSERTED = 4;
    public static final int RIL_SIM_STATUS_RECOVERED = 5;

    // required .RIL_SIM_SAP_STATUS_IND.Status statusChange = 1;
    public static final int STATUSCHANGE_FIELD_NUMBER = 1;
    private boolean hasStatusChange;
    private int statusChange_ = org.android.btsap.SapApi.RIL_SIM_SAP_STATUS_IND.RIL_SIM_STATUS_UNKNOWN_ERROR;
    public boolean hasStatusChange() { return hasStatusChange; }
    public int getStatusChange() { return statusChange_; }
    public RIL_SIM_SAP_STATUS_IND setStatusChange(int value) {
      hasStatusChange = true;
      statusChange_ = value;
      return this;
    }
    public RIL_SIM_SAP_STATUS_IND clearStatusChange() {
      hasStatusChange = false;
      statusChange_ = org.android.btsap.SapApi.RIL_SIM_SAP_STATUS_IND.RIL_SIM_STATUS_UNKNOWN_ERROR;
      return this;
    }

    public final RIL_SIM_SAP_STATUS_IND clear() {
      clearStatusChange();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasStatusChange) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasStatusChange()) {
        output.writeInt32(1, getStatusChange());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasStatusChange()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getStatusChange());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_STATUS_IND mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setStatusChange(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_STATUS_IND parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_STATUS_IND) (new RIL_SIM_SAP_STATUS_IND().mergeFrom(data));
    }

    public static RIL_SIM_SAP_STATUS_IND parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_STATUS_IND().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ() {}

    public final RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ) (new RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 2;
    public static final int RIL_E_SIM_DATA_NOT_AVAILABLE = 6;

    // required .RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP.RIL_E_SUCCESS;
      return this;
    }

    // optional int32 CardReaderStatus = 2;
    public static final int CARDREADERSTATUS_FIELD_NUMBER = 2;
    private boolean hasCardReaderStatus;
    private int cardReaderStatus_ = 0;
    public int getCardReaderStatus() { return cardReaderStatus_; }
    public boolean hasCardReaderStatus() { return hasCardReaderStatus; }
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP setCardReaderStatus(int value) {
      hasCardReaderStatus = true;
      cardReaderStatus_ = value;
      return this;
    }
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP clearCardReaderStatus() {
      hasCardReaderStatus = false;
      cardReaderStatus_ = 0;
      return this;
    }

    public final RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP clear() {
      clearResponse();
      clearCardReaderStatus();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
      if (hasCardReaderStatus()) {
        output.writeInt32(2, getCardReaderStatus());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      if (hasCardReaderStatus()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getCardReaderStatus());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
          case 16: {
            setCardReaderStatus(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP) (new RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_TRANSFER_CARD_READER_STATUS_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_ERROR_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_ERROR_RSP() {}

    public final RIL_SIM_SAP_ERROR_RSP clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_ERROR_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_ERROR_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_ERROR_RSP) (new RIL_SIM_SAP_ERROR_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_ERROR_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_ERROR_RSP().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ() {}

    // enum Protocol
    public static final int t0 = 0;
    public static final int t1 = 1;

    // required .RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ.Protocol protocol = 1;
    public static final int PROTOCOL_FIELD_NUMBER = 1;
    private boolean hasProtocol;
    private int protocol_ = org.android.btsap.SapApi.RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ.t0;
    public boolean hasProtocol() { return hasProtocol; }
    public int getProtocol() { return protocol_; }
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ setProtocol(int value) {
      hasProtocol = true;
      protocol_ = value;
      return this;
    }
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ clearProtocol() {
      hasProtocol = false;
      protocol_ = org.android.btsap.SapApi.RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ.t0;
      return this;
    }

    public final RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ clear() {
      clearProtocol();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasProtocol) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasProtocol()) {
        output.writeInt32(1, getProtocol());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasProtocol()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getProtocol());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setProtocol(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ) (new RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ().mergeFrom(data));
    }

    public static RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_REQ().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP extends
      com.google.protobuf.micro.MessageMicro {
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP() {}

    // enum Response
    public static final int RIL_E_SUCCESS = 0;
    public static final int RIL_E_GENERIC_FAILURE = 2;
    public static final int RIL_E_SIM_ABSENT = 11;
    public static final int RIL_E_SIM_NOT_READY = 16;
    public static final int RIL_E_SIM_ALREADY_POWERED_OFF = 17;

    // required .RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP.Response response = 1;
    public static final int RESPONSE_FIELD_NUMBER = 1;
    private boolean hasResponse;
    private int response_ = org.android.btsap.SapApi.RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP.RIL_E_SUCCESS;
    public boolean hasResponse() { return hasResponse; }
    public int getResponse() { return response_; }
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP setResponse(int value) {
      hasResponse = true;
      response_ = value;
      return this;
    }
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP clearResponse() {
      hasResponse = false;
      response_ = org.android.btsap.SapApi.RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP.RIL_E_SUCCESS;
      return this;
    }

    public final RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP clear() {
      clearResponse();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasResponse) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasResponse()) {
        output.writeInt32(1, getResponse());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasResponse()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getResponse());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setResponse(input.readInt32());
            break;
          }
        }
      }
    }

    public static RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP) (new RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP().mergeFrom(data));
    }

    public static RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RIL_SIM_SAP_SET_TRANSFER_PROTOCOL_RSP().mergeFrom(input);
    }

  }

}
