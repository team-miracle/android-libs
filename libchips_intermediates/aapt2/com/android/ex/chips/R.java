/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.ex.chips;

public final class R {
  public static final class attr {
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>end</td><td>0</td><td></td></tr>
     * <tr><td>start</td><td>1</td><td></td></tr>
     * </table>
     */
    public static int avatarPosition=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int chipBackground=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int chipDelete=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int chipFontSize=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int chipHeight=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int chipPadding=0x00000000;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static int disableDelete=0x00000000;
    /**
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int font=0x00000000;
    /**
     * The authority of the Font Provider to be used for the request.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderAuthority=0x00000000;
    /**
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int fontProviderCerts=0x00000000;
    /**
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     */
    public static int fontProviderFetchStrategy=0x00000000;
    /**
     * The length of the timeout during fetching.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     */
    public static int fontProviderFetchTimeout=0x00000000;
    /**
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderPackage=0x00000000;
    /**
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderQuery=0x00000000;
    /**
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static int fontStyle=0x00000000;
    /**
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontVariationSettings=0x00000000;
    /**
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static int fontWeight=0x00000000;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>baseline</td><td>1</td><td></td></tr>
     * <tr><td>bottom</td><td>0</td><td></td></tr>
     * </table>
     */
    public static int imageSpanAlignment=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int invalidChipBackground=0x00000000;
    /**
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static int ttcIndex=0x00000000;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static int unselectedChipBackgroundColor=0x00000000;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static int unselectedChipTextColor=0x00000000;
  }
  public static final class color {
    public static int autocomplete_bottom_shadow_start=0x00000000;
    public static int autocomplete_divider_color=0x00000000;
    public static int chip_background=0x00000000;
    public static int chip_background_invalid=0x00000000;
    public static int chips_dropdown_background_activated=0x00000000;
    public static int chips_dropdown_background_pressed=0x00000000;
    public static int chips_dropdown_permission_text=0x00000000;
    public static int chips_dropdown_text=0x00000000;
    public static int chips_dropdown_text_activated=0x00000000;
    public static int chips_dropdown_text_default=0x00000000;
    public static int chips_dropdown_text_highlighted=0x00000000;
    public static int notification_action_color_filter=0x00000000;
    public static int notification_icon_bg_color=0x00000000;
    public static int ripple_material_light=0x00000000;
    public static int secondary_text_default_material_light=0x00000000;
  }
  public static final class dimen {
    public static int chip_custom_divider_height=0x00000000;
    public static int chip_dropdown_height=0x00000000;
    public static int chip_height=0x00000000;
    /**
     * dropdown
     */
    public static int chip_icon_margin_end=0x00000000;
    public static int chip_icon_padding=0x00000000;
    /**
     * chip
     */
    public static int chip_padding=0x00000000;
    public static int chip_padding_end=0x00000000;
    /**
     * override default padding values, -1dp if it's not set to override
     */
    public static int chip_padding_start=0x00000000;
    public static int chip_text_size=0x00000000;
    public static int chip_wrapper_bottom_padding=0x00000000;
    public static int chip_wrapper_end_padding=0x00000000;
    /**
     * autocomplete dropdown
     */
    public static int chip_wrapper_start_padding=0x00000000;
    public static int chip_wrapper_top_padding=0x00000000;
    public static int compat_button_inset_horizontal_material=0x00000000;
    public static int compat_button_inset_vertical_material=0x00000000;
    public static int compat_button_padding_horizontal_material=0x00000000;
    public static int compat_button_padding_vertical_material=0x00000000;
    public static int compat_control_corner_material=0x00000000;
    public static int compat_notification_large_icon_max_height=0x00000000;
    public static int compat_notification_large_icon_max_width=0x00000000;
    public static int line_spacing_extra=0x00000000;
    public static int notification_action_icon_size=0x00000000;
    public static int notification_action_text_size=0x00000000;
    public static int notification_big_circle_margin=0x00000000;
    public static int notification_content_margin_start=0x00000000;
    public static int notification_large_icon_height=0x00000000;
    public static int notification_large_icon_width=0x00000000;
    public static int notification_main_column_padding_top=0x00000000;
    public static int notification_media_narrow_margin=0x00000000;
    public static int notification_right_icon_size=0x00000000;
    public static int notification_right_side_padding_top=0x00000000;
    public static int notification_small_icon_background_padding=0x00000000;
    public static int notification_small_icon_size_as_large=0x00000000;
    public static int notification_subtext_size=0x00000000;
    public static int notification_top_pad=0x00000000;
    public static int notification_top_pad_large_text=0x00000000;
  }
  public static final class drawable {
    public static int chip_autocomplete_divider_background=0x00000000;
    public static int chips_dropdown_background=0x00000000;
    public static int chips_ic_close_24dp=0x00000000;
    public static int ic_cancel_wht_24dp=0x00000000;
    public static int ic_contact_picture=0x00000000;
    public static int list_item_font_primary=0x00000000;
    public static int list_item_font_secondary=0x00000000;
    public static int notification_action_background=0x00000000;
    public static int notification_bg=0x00000000;
    public static int notification_bg_low=0x00000000;
    public static int notification_bg_low_normal=0x00000000;
    public static int notification_bg_low_pressed=0x00000000;
    public static int notification_bg_normal=0x00000000;
    public static int notification_bg_normal_pressed=0x00000000;
    public static int notification_icon_background=0x00000000;
    public static int notification_template_icon_bg=0x00000000;
    public static int notification_template_icon_low_bg=0x00000000;
    public static int notification_tile_bg=0x00000000;
    public static int notify_panel_notification_icon_bg=0x00000000;
  }
  public static final class id {
    public static int action_container=0x00000000;
    public static int action_divider=0x00000000;
    public static int action_image=0x00000000;
    public static int action_text=0x00000000;
    public static int actions=0x00000000;
    public static int async=0x00000000;
    public static int baseline=0x00000000;
    public static int blocking=0x00000000;
    public static int bottom=0x00000000;
    public static int chip_autocomplete_bottom_divider=0x00000000;
    public static int chip_autocomplete_top_divider=0x00000000;
    public static int chip_indicator_text=0x00000000;
    public static int chip_permission_bottom_divider=0x00000000;
    public static int chip_permission_wrapper=0x00000000;
    public static int chip_person_wrapper=0x00000000;
    public static int chronometer=0x00000000;
    public static int end=0x00000000;
    public static int forever=0x00000000;
    public static int icon=0x00000000;
    public static int icon_group=0x00000000;
    public static int info=0x00000000;
    public static int italic=0x00000000;
    public static int line1=0x00000000;
    public static int line3=0x00000000;
    public static int normal=0x00000000;
    public static int notification_background=0x00000000;
    public static int notification_main_column=0x00000000;
    public static int notification_main_column_container=0x00000000;
    public static int right_icon=0x00000000;
    public static int right_side=0x00000000;
    public static int start=0x00000000;
    public static int tag_transition_group=0x00000000;
    public static int tag_unhandled_key_event_manager=0x00000000;
    public static int tag_unhandled_key_listeners=0x00000000;
    public static int text=0x00000000;
    public static int text1=0x00000000;
    public static int text2=0x00000000;
    public static int time=0x00000000;
    public static int title=0x00000000;
  }
  public static final class integer {
    public static int chips_max_lines=0x00000000;
    public static int status_bar_notification_info_maxnum=0x00000000;
  }
  public static final class layout {
    public static int chips_autocomplete_recipient_dropdown_item=0x00000000;
    public static int chips_recipient_dropdown_item=0x00000000;
    public static int more_item=0x00000000;
    public static int notification_action=0x00000000;
    public static int notification_action_tombstone=0x00000000;
    public static int notification_template_custom_big=0x00000000;
    public static int notification_template_icon_group=0x00000000;
    public static int notification_template_part_chronometer=0x00000000;
    public static int notification_template_part_time=0x00000000;
  }
  public static final class string {
    /**
     * Announce that there are no possible recipient entries that the user can select from for accessibility purposes [CHAR LIMIT=200]
     */
    public static int accessbility_suggestion_dropdown_closed=0x00000000;
    /**
     * Announce the number of possible recipient entries that the user can select from for accessibility purposes [CHAR LIMIT=200]
     */
    public static int accessbility_suggestion_dropdown_opened=0x00000000;
    /**
     * Text displayed in the enter key slot when the recipientedittextview has focus [CHAR LIMIT=12]
     */
    public static int action_label=0x00000000;
    /**
     * Text displayed as the secondary action for a dialog to cancel. [CHAR LIMIT=25]
     */
    public static int chips_action_cancel=0x00000000;
    /**
     * Text displayed as the primary action for a dialog to copy text. [CHAR LIMIT=25]
     */
    public static int chips_action_copy=0x00000000;
    /**
     * Text displayed on the drop down item that is shown when app doesn't have Contact permission. This item will open dialog to request permission. [CHAR LIMIT=50]
     */
    public static int chips_permission_text=0x00000000;
    /**
     * Text displayed when the user long presses on a chip to copy the recipients email address [CHAR LIMIT=200]
     */
    public static int copy_email=0x00000000;
    /**
     * Text displayed when the user long presses on a chip to copy the recipient's phone number [CHAR LIMIT=200]
     */
    public static int copy_number=0x00000000;
    /**
     * Description for the delete button that removes the selected contact from the recipients [CHAR LIMIT=100]
     */
    public static int dropdown_delete_button_desc=0x00000000;
    /**
     * Text displayed when the recipientedittextview is not focused. Displays the total number of recipients since the field is shrunk to just display a portion
     */
    public static int more_string=0x00000000;
    public static int status_bar_notification_info_overflow=0x00000000;
  }
  public static final class style {
    public static int ChipAutocompleteDividerStyle=0x00000000;
    public static int ChipAutocompleteDividerStyle_PermissionItem=0x00000000;
    public static int ChipAutocompleteWrapperStyle=0x00000000;
    public static int ChipDeleteIconBaseStyle=0x00000000;
    public static int ChipDeleteIconStyle=0x00000000;
    public static int ChipEndIconStyle=0x00000000;
    public static int ChipIconBaseStyle=0x00000000;
    public static int ChipIndicatorTextStyle=0x00000000;
    public static int ChipPermissionDismissIconStyle=0x00000000;
    public static int ChipPermissionStyle=0x00000000;
    public static int ChipStartIconStyle=0x00000000;
    public static int ChipSubtitleStyle=0x00000000;
    public static int ChipTextViewLayoutStyle=0x00000000;
    public static int ChipTitleStyle=0x00000000;
    public static int RecipientEditTextView=0x00000000;
    public static int RecipientEditTextViewBase=0x00000000;
    public static int TextAppearance_Compat_Notification=0x00000000;
    public static int TextAppearance_Compat_Notification_Info=0x00000000;
    public static int TextAppearance_Compat_Notification_Line2=0x00000000;
    public static int TextAppearance_Compat_Notification_Time=0x00000000;
    public static int TextAppearance_Compat_Notification_Title=0x00000000;
    public static int Widget_Compat_NotificationActionContainer=0x00000000;
    public static int Widget_Compat_NotificationActionText=0x00000000;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a FontFamily.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderAuthority com.android.ex.chips:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderCerts com.android.ex.chips:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchStrategy com.android.ex.chips:fontProviderFetchStrategy}</code></td><td>The strategy to be used when fetching font data from a font provider in XML layouts.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchTimeout com.android.ex.chips:fontProviderFetchTimeout}</code></td><td>The length of the timeout during fetching.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderPackage com.android.ex.chips:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderQuery com.android.ex.chips:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
     * </table>
     * @see #FontFamily_fontProviderAuthority
     * @see #FontFamily_fontProviderCerts
     * @see #FontFamily_fontProviderFetchStrategy
     * @see #FontFamily_fontProviderFetchTimeout
     * @see #FontFamily_fontProviderPackage
     * @see #FontFamily_fontProviderQuery
     */
    public static final int[] FontFamily={
      0x00000000, 0x00000000, 0x00000000, 0x00000000, 
      0x00000000, 0x00000000
    };
    /**
     * <p>
     * @attr description
     * The authority of the Font Provider to be used for the request.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.chips:fontProviderAuthority
     */
    public static int FontFamily_fontProviderAuthority=0;
    /**
     * <p>
     * @attr description
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:fontProviderCerts
     */
    public static int FontFamily_fontProviderCerts=1;
    /**
     * <p>
     * @attr description
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     *
     * @attr name com.android.ex.chips:fontProviderFetchStrategy
     */
    public static int FontFamily_fontProviderFetchStrategy=2;
    /**
     * <p>
     * @attr description
     * The length of the timeout during fetching.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     *
     * @attr name com.android.ex.chips:fontProviderFetchTimeout
     */
    public static int FontFamily_fontProviderFetchTimeout=3;
    /**
     * <p>
     * @attr description
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.chips:fontProviderPackage
     */
    public static int FontFamily_fontProviderPackage=4;
    /**
     * <p>
     * @attr description
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.chips:fontProviderQuery
     */
    public static int FontFamily_fontProviderQuery=5;
    /**
     * Attributes that can be used with a FontFamilyFont.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamilyFont_font com.android.ex.chips:font}</code></td><td>The reference to the font file to be used.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontStyle com.android.ex.chips:fontStyle}</code></td><td>The style of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontVariationSettings com.android.ex.chips:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontWeight com.android.ex.chips:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_ttcIndex com.android.ex.chips:ttcIndex}</code></td><td>The index of the font in the tcc font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_font android:font}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontWeight android:fontWeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontStyle android:fontStyle}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_ttcIndex android:ttcIndex}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontVariationSettings android:fontVariationSettings}</code></td><td></td></tr>
     * </table>
     * @see #FontFamilyFont_font
     * @see #FontFamilyFont_fontStyle
     * @see #FontFamilyFont_fontVariationSettings
     * @see #FontFamilyFont_fontWeight
     * @see #FontFamilyFont_ttcIndex
     * @see #FontFamilyFont_android_font
     * @see #FontFamilyFont_android_fontWeight
     * @see #FontFamilyFont_android_fontStyle
     * @see #FontFamilyFont_android_ttcIndex
     * @see #FontFamilyFont_android_fontVariationSettings
     */
    public static final int[] FontFamilyFont={
      0x00000000, 0x00000000, 0x00000000, 0x00000000, 
      0x00000000, 0x01010532, 0x01010533, 0x0101053f, 
      0x0101056f, 0x01010570
    };
    /**
     * <p>
     * @attr description
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:font
     */
    public static int FontFamilyFont_font=0;
    /**
     * <p>
     * @attr description
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.ex.chips:fontStyle
     */
    public static int FontFamilyFont_fontStyle=1;
    /**
     * <p>
     * @attr description
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.chips:fontVariationSettings
     */
    public static int FontFamilyFont_fontVariationSettings=2;
    /**
     * <p>
     * @attr description
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.ex.chips:fontWeight
     */
    public static int FontFamilyFont_fontWeight=3;
    /**
     * <p>
     * @attr description
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.ex.chips:ttcIndex
     */
    public static int FontFamilyFont_ttcIndex=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#font}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:font
     */
    public static int FontFamilyFont_android_font=5;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontWeight}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fontWeight
     */
    public static int FontFamilyFont_android_fontWeight=6;
    /**
     * <p>
     * @attr description
     * References to the framework attrs
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fontStyle
     */
    public static int FontFamilyFont_android_fontStyle=7;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#ttcIndex}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:ttcIndex
     */
    public static int FontFamilyFont_android_ttcIndex=8;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontVariationSettings}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static int FontFamilyFont_android_fontVariationSettings=9;
    /**
     * Attributes that can be used with a RecipientEditTextView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RecipientEditTextView_avatarPosition com.android.ex.chips:avatarPosition}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_chipBackground com.android.ex.chips:chipBackground}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_chipDelete com.android.ex.chips:chipDelete}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_chipFontSize com.android.ex.chips:chipFontSize}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_chipHeight com.android.ex.chips:chipHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_chipPadding com.android.ex.chips:chipPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_disableDelete com.android.ex.chips:disableDelete}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_imageSpanAlignment com.android.ex.chips:imageSpanAlignment}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_invalidChipBackground com.android.ex.chips:invalidChipBackground}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_unselectedChipBackgroundColor com.android.ex.chips:unselectedChipBackgroundColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecipientEditTextView_unselectedChipTextColor com.android.ex.chips:unselectedChipTextColor}</code></td><td></td></tr>
     * </table>
     * @see #RecipientEditTextView_avatarPosition
     * @see #RecipientEditTextView_chipBackground
     * @see #RecipientEditTextView_chipDelete
     * @see #RecipientEditTextView_chipFontSize
     * @see #RecipientEditTextView_chipHeight
     * @see #RecipientEditTextView_chipPadding
     * @see #RecipientEditTextView_disableDelete
     * @see #RecipientEditTextView_imageSpanAlignment
     * @see #RecipientEditTextView_invalidChipBackground
     * @see #RecipientEditTextView_unselectedChipBackgroundColor
     * @see #RecipientEditTextView_unselectedChipTextColor
     */
    public static final int[] RecipientEditTextView={
      0x00000000, 0x00000000, 0x00000000, 0x00000000, 
      0x00000000, 0x00000000, 0x00000000, 0x00000000, 
      0x00000000, 0x00000000, 0x00000000
    };
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#avatarPosition}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>end</td><td>0</td><td></td></tr>
     * <tr><td>start</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.ex.chips:avatarPosition
     */
    public static int RecipientEditTextView_avatarPosition=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#chipBackground}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:chipBackground
     */
    public static int RecipientEditTextView_chipBackground=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#chipDelete}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:chipDelete
     */
    public static int RecipientEditTextView_chipDelete=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#chipFontSize}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:chipFontSize
     */
    public static int RecipientEditTextView_chipFontSize=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#chipHeight}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:chipHeight
     */
    public static int RecipientEditTextView_chipHeight=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#chipPadding}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:chipPadding
     */
    public static int RecipientEditTextView_chipPadding=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#disableDelete}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.ex.chips:disableDelete
     */
    public static int RecipientEditTextView_disableDelete=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#imageSpanAlignment}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>baseline</td><td>1</td><td></td></tr>
     * <tr><td>bottom</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.ex.chips:imageSpanAlignment
     */
    public static int RecipientEditTextView_imageSpanAlignment=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#invalidChipBackground}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.chips:invalidChipBackground
     */
    public static int RecipientEditTextView_invalidChipBackground=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#unselectedChipBackgroundColor}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.ex.chips:unselectedChipBackgroundColor
     */
    public static int RecipientEditTextView_unselectedChipBackgroundColor=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.ex.chips.R.attr#unselectedChipTextColor}
     * attribute's value can be found in the {@link #RecipientEditTextView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.ex.chips:unselectedChipTextColor
     */
    public static int RecipientEditTextView_unselectedChipTextColor=10;
  }
}